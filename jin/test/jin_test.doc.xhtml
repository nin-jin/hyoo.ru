<?xml-stylesheet href="../../doc/-mix/dev.xsl" type="text/xsl" ?>
<doc_root
    doc_title="$jin_test"
    >

    <p>Тестирует код на наличие ошибок. Результат можно узнать заглянув в поле "passed". </p>
    <p>
        <script type="wc_test">
            _test.ok( $jin_test )
        </script>
        <script type="wc_test">
            var test= $jin_test(' ')
            _test.ok( test.passed )
        </script>
        <script type="wc_test">
            var test= $jin_test(' .. ')
            _test.not( test.passed )
        </script>
        <script type="wc_test">
            var test= $jin_test(' (void 0)() ')
            _test.not( test.passed )
        </script>
    </p>

    <p>Возникающие в процессе работы ошибки логируются в массиве "errors". </p>
    <p>
        <script type="wc_test">
            var test= $jin_test(' (void 0)() ')
            _test.ok( test.errors[0] )
        </script>
    </p>

    <p>Кроме исходного кода в виде строки можно передать функцию, которая принимает параметром инстанс теста. Разумеется в этом случае обработка синтаксических ошибок будет уже на вашей совести. </p>
    <p>
        <script type="wc_test">
            var test= $jin_test( function( test ){
                test.passed
            } )
            _test.ok( test.passed )
        </script>
    </p>

    <p>Предоставляет исполняемому коду инстанс теста в качестве переменной "test". Он имеет два метода - ok и not. Вызванные без параметров они объявляют тест пройденным и проваленным соответственно. </p>
    <p>
        <script type="wc_test">
            var test= $jin_test(' test.ok() ')
            _test.ok( test.passed )
        </script>
        <script type="wc_test">
            var test= $jin_test(' test.not() ')
            _test.not( test.passed )
        </script>
    </p>

    <p>Если в "test.ok" или "test.not" передать одно значение, то тест будет пройден только если оно истинное и ложное соответственно.</p>
    <p>
        <script type="wc_test">
            var test= $jin_test(' test.ok( 1 ) ')
            _test.ok( test.passed )
        </script>
        <script type="wc_test">
            var test= $jin_test(' test.ok( 0 ) ')
            _test.not( test.passed )
        </script>
        <script type="wc_test">
            var test= $jin_test(' test.not( 0 ) ')
            _test.ok( test.passed )
        </script>
        <script type="wc_test">
            var test= $jin_test(' test.not( 1 ) ')
            _test.not( test.passed )
        </script>
    </p>
    
    <p>Если в "test.ok" или "test.not" передать два параметра, то тест будет пройден только если они равны или не равны соответственно. Сравнение строгое.</p>
    <p>
        <script type="wc_test">
            var test= $jin_test(' test.ok( 1, 1 ) ')
            _test.ok( test.passed )
        </script>
        <script type="wc_test">
            var test= $jin_test(' test.ok( 1, 2 ) ')
            _test.not( test.passed )
        </script>
        <script type="wc_test">
            var test= $jin_test(' test.not( 2, 1 ) ')
            _test.ok( test.passed )
        </script>
        <script type="wc_test">
            var test= $jin_test(' test.not( 2, 2 ) ')
            _test.not( test.passed )
        </script>
        <script type="wc_test">
            var test= $jin_test(' test.ok( {}, {} ) ')
            _test.not( test.passed )
        </script>
        <script type="wc_test">
            var test= $jin_test(' test.ok( 0 / 0, Number.NaN ) ')
            _test.ok( test.passed )
        </script>
        <script type="wc_test">
            var test= $jin_test(' test.ok( 1 / 0, Number.POSITIVE_INFINITY ) ')
            _test.ok( test.passed )
        </script>
    </p>
    
    <p>Чтобы сделать тест асинхронным нужно задать таймаут в миллисекундах до истечения которого тест по любому должен завершиться. Кроме того, по окончании всех асинхронных операций следует вызвать метод "done". Имейте ввиду, что асинхронные тесты стартуют последовательно, не дожидаясь завершения других асинхронных тестов.</p>
    <p>
        <script type="wc_test">
            _test.deadline( 100 )
            
            var test= $jin_test(' test.timeout= 50 ')
            
            _test.not( test.passed )
        </script>
        <script type="wc_test">
            _test.deadline( 100 )
            
            var test= $jin_test(' test.timeout= 50 ')
            
            setTimeout( function( ){
                _test.not( test.passed )
            }, 75 )
        </script>
        <script type="wc_test">
            _test.deadline( 100 )
            
            var test= $jin_test(' test.timeout= 50; test.done() ')
            
            _test.ok( test.passed )
        </script>
        <script type="wc_test">
            _test.deadline( 100 )
            
            var test= $jin_test( function( test ){
                test.timeout= 50
                setTimeout( function( ){
                    test.done()
                }, 25 )
            } )
            
            setTimeout( function( ){
                _test.ok( test.passed )
            }, 75 )
        </script>
        <script type="wc_test">
            _test.deadline( 100 )
            
            var test= $jin_test( function( test ){
                test.timeout= 25
                setTimeout( function( ){
                    test.done()
                }, 50 )
            } )
            
            setTimeout( function( ){
                _test.not( test.passed )
            }, 75 )
        </script>
    </p>
    
    <p>Чтобы ловить ошибки и в коллбэках, вызываемых асинхронно, стоит заворачивать их в "test.callback".</p>
    <p>
        <script type="wc_test">
            _test.deadline( 100 )
            
            var test= $jin_test( function( test ){
                test.timeout= 50
                setTimeout( function( ){
                    (void 0)()
                }, 25 )
            } )
            
            setTimeout( function( ){
                _test.ok( test.errors[0].message, 'timeout(50)' )
            }, 75 )
        </script>
        <script type="wc_test">
            _test.deadline( 100 )
            
            var test= $jin_test( function( test ){
                test.timeout= 50
                setTimeout( test.callback( function( ){
                    (void 0)()
                } ), 25 )
            } )
            
            setTimeout( function( ){
                _test.not( test.errors[0].message, 'timeout(50)' )
            }, 75 )
        </script>
    </p>
    
    <p>Для отслеживания завершения асинхронного теста можно передать вторым параметром колбэк-функцию.</p>
    <p>
        <script type="wc_test">
            _test.deadline( 50 )
            
            var test= $jin_test( function( test ){
                test.timeout= 100
                setTimeout( function( ){
                    test.done()
                }, 25 )
            }, function( test ){
                _test.ok( test.passed )
            } )
        </script>
    </p>
    
</doc_root>
